openapi: 3.0.0
info:
  description: "This API provides endpoints for warehouse management."
  version: "1.0.0"
  title: "Warehouse API"
  contact:
    email: "raffaella.patronelli@gmail.com"
tags:
  - name: "Inventory"
    description: "Inventory endpoints"
  - name: "Products"
    description: "Product endpoints"
paths:
  /articles:
    post:
      tags:
        - "Inventory"
      summary: "Add a new article"
      requestBody:
        required: true
        description: "Article information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/article"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - "Inventory"
      summary: "Retrieve all articles"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article_inventory'
  /articles/file:
    post:
      tags:
        - "Inventory"
      summary: "Upload a list of articles via file"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/article_inventory"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /products:
    post:
      tags:
        - "Products"
      summary: "Add a new product"
      requestBody:
        required: true
        description: "Product information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product_info"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - "Products"
      summary: "Retrieve all products"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product_inventory'
  /products/file:
    post:
      tags:
        - "Products"
      summary: "Upload a list of products via file"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/products_info"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /products/{id}/sell:
    post:
      tags:
        - "Products"
      summary: "Sell a product"
      description: "Sell a product and update inventory accordingly"
      parameters:
        - in: path
          name: id
          description: "Product ID"
          required: true
          schema:
            type: "integer"
            minimum: 1
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not found"

components:
  schemas:
    article:
      type: "object"
      properties:
        art_id:
          type: "integer"
          format: "int64"
          example: 1
          minimum: 1
        name:
          type: "string"
          example: "leg"
          minLength: 1
        stock:
          type: "integer"
          minimum: 1
          example: 13
      required:
        - art_id
        - name
        - stock
    article_inventory:
      type: "object"
      properties:
        inventory:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/article'
      required:
        - inventory
    product:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          minimum: 1
          example: 1
        name:
          type: "string"
          example: "Dining Chair"
          minLength: 1
        is_available:
          type: "boolean"
        stock:
          type: "integer"
          example: 42
          minimum: 0
        contain_articles:
          type: "array"
          minItems: 1
          items:
            type: "object"
            properties:
              art_id:
                type: "integer"
                format: "int64"
                example: 1
                minimum: 1
              amount_of:
                type: "integer"
                minimum: 1
            required:
              - art_id
              - amount_of
      required:
        - id
        - name
        - is_available
        - stock
        - contain_articles
    product_inventory:
      type: object
      properties:
        products:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/product'
      required:
        - products
    product_info:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Dining Chair"
          minLength: 1
        contain_articles:
          type: "array"
          minItems: 1
          items:
            type: "object"
            properties:
              art_id:
                type: "integer"
                format: "int64"
                minimum: 1
                example: 1
              amount_of:
                type: "integer"
                minimum: 1
            required:
              - art_id
              - amount_of
      required:
        - name
        - contain_articles
    products_info:
      type: "object"
      properties:
        products:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/product_info'
      required:
        - products
    error:
      type: "object"
      description: Error message
      properties:
        severity:
          type: string
          enum:
            - critical
            - error
            - warning
            - info
          example: error
        message:
          type: string
          example: Failed to process the request due to errors in the payload
          description: A descriptive error message for the consumer
      required:
        - severity
        - message